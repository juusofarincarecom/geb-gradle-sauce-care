plugins {
    id "java"
    id "idea"
    id "groovy"
    id "com.github.erdi.webdriver-binaries" version "2.7"
    id "com.github.erdi.idea-base" version "2.2"
    id "org.gebish.saucelabs" version "7.0"
    id 'io.qameta.allure' version '2.8.1'
}

group = thegroup
version = theversion
description = "Geb SauceLabs for Care.com QA"

compileJava.sourceCompatibility = thesourceCompatibility
compileJava.targetCompatibility = thesourceCompatibility

ext {
    drivers = [
        //local drivers
        "firefox",
        "chrome",
        "chromeHeadless",
        //saucelabs drivers
        "edge_win",
        "firefox_mac",
        "chrome_mac",
        "safari_ios",
        "chrome_android"
    ]
    gebVersion = '7.0'
    seleniumVersion = '4.8.3'
    allureVersion = '2.21.0'
    junit5Version = '5.9.2'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    
    // If using Spock, need to depend on geb-spock
    implementation "org.gebish:geb-spock:$gebVersion"

    // If using JUnit 5, need to depend on geb-junit5
    implementation "org.gebish:geb-junit5:$gebVersion"
    
    //Allure
    implementation "io.qameta.allure:allure-junit5:$allureVersion"
    implementation "io.qameta.allure:allure-java-commons:$allureVersion"
    
    //JUnit5
    implementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
    implementation "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
    implementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"

    // Drivers
    implementation "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    implementation "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    implementation "org.seleniumhq.selenium:selenium-edge-driver:$seleniumVersion"
    implementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    implementation "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
    implementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    
    //appium
    implementation group: 'io.appium', name: 'java-client', version: '8.3.0'
    
    // Sauce
    sauceConnect 'com.saucelabs:ci-sauce:1.168'
    
    //Logging
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'org.slf4j:slf4j-simple:2.0.7'

}

webdriverBinaries {
    chromedriver {
        versionRegexp = '.*'
    }
    geckodriver {
        versionRegexp = '.*'
    }
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        group JavaBasePlugin.VERIFICATION_GROUP

        outputs.upToDateWhen { false }  // Always run tests

        useJUnitPlatform()
        systemProperty "geb.build.reportsDir", reporting.file("geb/$name")
        systemProperty "geb.env", driver
    }
}

test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = true
    systemProperty("junit.jupiter.execution.parallel.enabled", "true")
    systemProperty("junit.jupiter.execution.parallel.config.strategy", "dynamic")
    systemProperty("junit.jupiter.extensions.autodetection.enabled", "true")
    systemProperty("org.aspectj.weaver.Dump.exception", "false")
}

tasks.withType(Test) {
    maxHeapSize = "1g"
    jvmArgs '-XX:MaxMetaspaceSize=128m'
    testLogging {
        testLogging.showStackTraces = true
        testLogging.showStandardStreams = true
        testLogging.events "standardOut", "started", "passed", "skipped", "failed"
        testLogging.exceptionFormat "short"
    }
    maxParallelForks = System.getProperty("forks", "8") as Integer
    forkEvery = 1
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.memoryMaximumSize = '256m'
}

allure {
    autoconfigure = false
    aspectjweaver = true
    version = allureVersion
    resultsDir = file("allure-results")
    reportDir = file("allure-report")
}

task aggregateBuildInfo(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperties(System.properties)
    mainClass = "reporting.BuildInfoAggregator"
}

[test].forEach {it.finalizedBy(aggregateBuildInfo) }